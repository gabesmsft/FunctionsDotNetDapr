{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "defaultValue": "northeurope",
      "type": "String"
    },
    "DisableDaprSecretComponent": {
      "type": "Bool",
      "defaultValue": true,
      "metadata": {
        "description": "If the DisableDaprSecretComponent is set to false you will need to provide valid values for the AADAppId, AADObjectId, and AADAppSecret parameters."
      }
    },
    "AADAppId": {
      "type": "SecureString",
      "defaultValue": "PLACEHOLDER",
      "metadata": {
        "description": "If the DisableDaprSecretComponent is set to false, provide an AAD App registration client id. The AAD App registration must be created ahead of time. This App registration will be assigned Key Vault secret user permissions to the Key Vault that is created, and will be used to authenticate the Dapr secret store component to the Key Vault."
      }
    },
    "AADObjectId": {
      "type": "SecureString",
      "defaultValue": "mysbqueue1",
      "metadata": {
        "description": "If the DisableDaprSecretComponent is set to false, provide an AAD Enterprise Application object id. Find this on the Enterprise Application that is associated with the app registration. This is NOT the same thing as the AAD App registration object id. The AAD App registration must be created ahead of time. This App registration will be assigned Key Vault secret user permissions to the Key Vault that is created, and will be used to authenticate the Dapr secret store component to the Key Vault."
      }
    },
    "AADAppSecret": {
      "type": "SecureString",
      "defaultValue": "mysbqueue1",
      "metadata": {
        "description": "If the DisableDaprSecretComponent is set to false, provide the AAD App registration secret. The AAD App registration must be created ahead of time. This App registration will be used to authenticate the Dapr secret store component to the Key Vault."
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "[concat('ContainerAppEnv-', uniqueString(resourceGroup().id))]"
    },
    "functionappCI1": {
      "type": "String",
      "defaultValue": "docker|gfakedocker/functionswithdapr:v1.0.0"
    },
    "functionapp1": {
      "type": "String",
      "defaultValue": "[concat('daprfunctionapp2-', uniqueString(resourceGroup().id))]"
    },
    "backendDaprAppId": {
      "type": "String",
      "defaultValue": "[parameters('functionapp1')]",
      "metadata": {
        "description": "By default, will use the same Function App for the target Dapr invocation service."
      }
    },
    "serviceBusNamespaceName": {
      "type": "string",
      "defaultValue": "[format('serviceBusNS-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Service Bus namespace"
      }
    },
    "serviceBusQueueName": {
      "type": "string",
      "defaultValue": "mysbqueue1",
      "metadata": {
        "description": "Name of the Service Bus queue"
      }
    },
    "serviceBusTopicName": {
      "type": "string",
      "defaultValue": "mytopic1",
      "metadata": {
        "description": "Name of the Topic"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Storage Account"
      }
    },
    "storageQueueName": {
      "type": "string",
      "defaultValue": "mystorequeue1",
      "metadata": {
        "description": "Name of the Storage queue"
      }
    },
    "keyVaultName1": {
      "type": "string",
      "defaultValue": "[concat('keyvault1-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "If the DisableDaprSecretComponent is set to false, the Key Vault will be deployed."
      }
    },
    "storageBlobContainerName": {
      "type": "string",
      "defaultValue": "mystatestorecontainer1",
      "metadata": {
        "description": "Name of the Storage blob container for state store"
      }
    },
    "useConsumptionWorkloadProfile": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        false
      ],
      "metadata": {
        "description": "Placeholder until Function Apps can be deployed to workload-profile enabled Container App Environments."
      }
    }
  },
  "variables": {
    "policySBQueue": "RootManageSharedAccessKey",
    "policySBTopic": "policy1",
    "daprAppId1": "[parameters('functionapp1')]",
    "DOCKER_REGISTRY_SERVER_URL": "[split(split(parameters('functionappCI1'),'/')[0], '|')[1]]",
    "roleAssignmentName": "[guid('4633458b-17de-408a-b874-0445c86b69e6', parameters('AADObjectId'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName1')))]",
    "binding1": "mybinding1",
    "binding2": "mybinding2",
    "statestore": "mystatestore",
    "pubsub": "mypubsub1"
  },
  "resources": [
    {
      "apiVersion": "2018-01-01-preview",
      "name": "[parameters('serviceBusNamespaceName')]",
      "type": "Microsoft.ServiceBus/namespaces",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      }
    },
    {
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('serviceBusNamespaceName'), '/', parameters('serviceBusQueueName'))]",
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/', parameters('serviceBusNamespaceName'))]"
      ],
      "properties": {
        "lockDuration": "PT5M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "deadLetteringOnMessageExpiration": false,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
        "enablePartitioning": false,
        "enableExpress": false
      }
    },
    {
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('serviceBusNamespaceName'), '/', parameters('serviceBusTopicName'))]",
      "type": "Microsoft.ServiceBus/namespaces/topics",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/', parameters('serviceBusNamespaceName'))]"
      ],
      "properties": {
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "enableBatchedOperations": false,
        "supportOrdering": false,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
        "enablePartitioning": false,
        "enableExpress": false
      }
    },
    {
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('serviceBusNamespaceName'), '/', parameters('serviceBusTopicName'), '/', variables('policySBTopic'))]",
      "type": "Microsoft.ServiceBus/namespaces/topics/authorizationRules",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/topics/', parameters('serviceBusNamespaceName'), parameters('serviceBusTopicName'))]"
      ],
      "properties": {
        "Rights": [
          "Send",
          "Listen",
          "Manage"
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageQueueName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageBlobContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[parameters('keyVaultName1')]",
      "location": "[parameters('location')]",
      "properties": {
        "enableRbacAuthorization": true,
        "enableSoftDelete": false,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(parameters('keyVaultName1'), '/', 'mysecret1')]",
      "properties": {
        "value": "I like bacon."
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName1'))]"
      ]
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(parameters('keyVaultName1'), '/', 'mysecret2')]",
      "properties": {
        "value": "Maple donuts"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName1'), 'mysecret1')]"
      ]
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(parameters('keyVaultName1'), '/', 'mysecret3')]",
      "properties": {
        "value": "bran muffin"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName1'), 'mysecret2')]"
      ]
    },
    {
      "apiVersion": "2023-05-01",
      "type": "Microsoft.App/managedEnvironments/daprComponents",
      "name": "[concat(parameters('environmentName'), '/', variables('binding1'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/', parameters('serviceBusNamespaceName'))]"
      ],
      "properties": {
        "componentType": "bindings.azure.servicebusqueues",
        "version": "v1",
        "ignoreErrors": false,
        "initTimeout": "50s",
        "secrets": [
          {
            "name": "sbconn1secret",
            "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules',parameters('serviceBusNamespaceName'), variables('policySBQueue')),'2017-04-01').secondaryConnectionString]"
          }
        ],
        "metadata": [
          {
            "name": "connectionString",
            "secretRef": "sbconn1secret"
          },
          {
            "name": "queueName",
            "value": "[parameters('serviceBusQueueName')]"
          },
          {
            "name": "ttlInSeconds",
            "value": "60"
          }
        ],
        "scopes": [
          "[variables('daprAppId1')]"
        ]
      }
    },
    {
      "apiVersion": "2023-05-01",
      "type": "Microsoft.App/managedEnvironments/daprComponents",
      "name": "[concat(parameters('environmentName'), '/', variables('binding2'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('storageQueueName'))]"
      ],
      "properties": {
        "componentType": "bindings.azure.storagequeues",
        "version": "v1",
        "ignoreErrors": false,
        "initTimeout": "50s",
        "secrets": [
          {
            "name": "storagename1secret",
            "value": "[parameters('storageAccountName')]"
          },
          {
            "name": "storageconn1secret",
            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[1].value]"
          }
        ],
        "metadata": [
          {
            "name": "storageAccount",
            "secretRef": "storagename1secret"
          },
          {
            "name": "storageAccessKey",
            "secretRef": "storageconn1secret"
          },
          {
            "name": "queue",
            "value": "[parameters('storageQueueName')]"
          },
          {
            "name": "ttlInSeconds",
            "value": "600"
          }
        ],
        "scopes": [
          "[variables('daprAppId1')]"
        ]
      }
    },
    {
      "apiVersion": "2023-05-01",
      "type": "Microsoft.App/managedEnvironments/daprComponents",
      "name": "[concat(parameters('environmentName'), '/', variables('statestore'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('storageBlobContainerName'))]"
      ],
      "properties": {
        "componentType": "state.azure.blobstorage",
        "version": "v1",
        "ignoreErrors": false,
        "initTimeout": "50s",
        "secrets": [
          {
            "name": "storageaccountnamesecret",
            "value": "[parameters('storageAccountName')]"
          },
          {
            "name": "storageaccountkeysecret",
            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[1].value]"

          }
        ],
        "metadata": [
          {
            "name": "accountName",
            "secretRef": "storageaccountnamesecret"
          },
          {
            "name": "accountKey",
            "secretRef": "storageaccountkeysecret"
          },
          {
            "name": "containerName",
            "value": "[parameters('storageBlobContainerName')]"
          }
        ],
        "scopes": [
          "[parameters('functionapp1')]"
        ]
      }
    },
    {
      "apiVersion": "2023-05-01",
      "type": "Microsoft.App/managedEnvironments/daprComponents",
      "name": "[concat(parameters('environmentName'), '/', variables('pubsub'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/topics/authorizationRules',parameters('serviceBusNamespaceNAme'),parameters('serviceBusTopicName'),variables('policySBTopic'))]"
      ],
      "properties": {
        "componentType": "pubsub.azure.servicebus",
        "version": "v1",
        "ignoreErrors": false,
        "initTimeout": "50s",
        "secrets": [
          {
            "name": "sbconn1secret",
            "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/topics/authorizationRules',parameters('serviceBusNamespaceNAme'),parameters('serviceBusTopicName'),variables('policySBTopic')),'2017-04-01').secondaryConnectionString]"
          }
        ],
        "metadata": [
          {
            "name": "connectionString",
            "secretRef": "sbconn1secret"
          }
        ],
        "scopes": [
          "[parameters('functionapp1')]"
        ]
      }
    },
    {
      "name": "[parameters('functionapp1')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "apiVersion": "2022-09-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments/daprComponents', parameters('environmentName'), variables('binding1'))]",
        "[resourceId('Microsoft.App/managedEnvironments/daprComponents', parameters('environmentName'), variables('binding2'))]"
      ],
      "properties": {
        "name": "[parameters('functionapp1')]",
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments/', parameters('environmentName'))]",
        "workloadProfileName": "[if(parameters('useConsumptionWorkloadProfile'), 'Consumption', json('null'))]",
        "siteConfig": {
          "linuxFxVersion": "[parameters('functionappCI1')]",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[variables('DOCKER_REGISTRY_SERVER_URL')]"
            },
            {
              "name": "backendDaprAppId",
              "value": "[parameters('functionapp1')]"
            },
            {
              "name": "DisableDaprSecretComponent",
              "value": "[parameters('DisableDaprSecretComponent')]"
            }
          ]
        }
      }
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName1'))]",
      "name": "[variables('roleAssignmentName')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[parameters('AADObjectId')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName1'), 'mysecret3')]"
      ]
    },
    {
      "condition": "[not(parameters('DisableDaprSecretComponent'))]",
      "apiVersion": "2023-05-01",
      "type": "Microsoft.App/managedEnvironments/daprComponents",
      "name": "[concat(parameters('environmentName'), '/', 'mysecretstore')]",
      "dependsOn": [
        "[concat('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentName'))]"
      ],
      "properties": {
        "componentType": "secretstores.azure.keyvault",
        "version": "v1",
        "ignoreErrors": false,
        "initTimeout": "50s",
        "secrets": [
          {
            "name": "myvaultname",
            "value": "[parameters('keyVaultName1')]"
          },
          {
            "name": "myazuretenantid",
            "value": "[subscription().tenantId]"
          },
          {
            "name": "myazureclientid",
            "value": "[parameters('AADAppId')]"
          },
          {
            "name": "myazureclientsecret",
            "value": "[parameters('AADAppSecret')]"
          }
        ],
        "metadata": [
          {
            "name": "vaultName",
            "secretRef": "myvaultname"
          },
          {
            "name": "azureTenantId",
            "secretRef": "myazuretenantid"
          },
          {
            "name": "azureClientId",
            "secretRef": "myazureclientid"
          },
          {
            "name": "azureClientSecret",
            "secretRef": "myazureclientsecret"
          }
        ],
        "scopes": [
          "[variables('daprAppId1')]"
        ]
      }
    }
  ]
}
